library("ggmap")
library("tidyverse")
library("lubridate")
library("reshape2")
library("ggrepel")
library("tidycensus")
#library("dplyr")



source("GTFS_tidy.R")

#vars 
a.day <- ymd(20190513)
print(as.character(wday(a.day, label = TRUE, abbr = FALSE)))
mandatory.fields <- c("route_id", "service_id", "trip_id", "direction_id", 
                      "block_id", "shape_id", "stop_id", 
                      "stop_code", "stop_lon", "stop_lat", "stop_name", 
                      "route_short_name", "route_long_name", 
                      "service_id", "monday", "tuesday", "wednesday", "thursday", 
                      "friday", "saturday", "sunday", "start_date", "end_date",
                      "direction", "shape_pt_lat", "shape_pt_lon", 
                      "shape_dist_traveled", "shape_pt_sequence", 
                      "arrival_time", "departure_time", 
                      "stop_sequence", "trip_headsign", "trip_short_name", "timepoint",
                      "stop_timezone")
#data----
feed.url <- "http://github.com/transitland/gtfs-archives-not-hosted-elsewhere/raw/master/amtrak.zip"
if(!file.exists("20170401Amtrak.zip")) {
  download.file(feed.url, "20170401Amtrak.zip")
}
unzip("20170401Amtrak.zip")

gtfs_transfers       <- read_csv("transfers.txt",       col_types = c("ccdd"))  
gtfs_agency          <- read_csv("agency.txt",           col_types = c("dcccc")) 
gtfs_trips           <- read_csv("trips.txt",           col_types = c("dddcddc")) 
gtfs_calendar        <- read_csv("calendar.txt",        col_types = c("dddddddddd"))
gtfs_routes          <- read_csv("routes.txt",          col_types = c("ddccdccc")) 
#gtfs_directions      <- read_csv("directions.txt",      col_types = c("ddc")) 
gtfs_stops           <- read_csv("stops.txt",           col_types = c("ccddcc"))
#gtfs_stop_attributes <- read_csv("stop_attributes.txt", col_types = c("dc")) 
#gtfs_shapes          <- read_csv("shapes.txt",          col_types = c("cdddd"))
gtfs_stop_times      <- read_csv("stop_times.txt",      col_types = c("dcccddd"))

gtfs_calendar$start_date <- ymd(gtfs_calendar$start_date)
gtfs_calendar$end_date   <- ymd(gtfs_calendar$end_date)

# gtfs_stop_times$arrival_time <- force_tz(a.day + hms(gtfs_stop_times$arrival_time), 
#                                          tzone = "America/New_York") %>% as.POSIXct()
# gtfs_stop_times$departure_time <- force_tz(a.day + hms(gtfs_stop_times$departure_time), 
#                                          tzone = "America/New_York") %>% as.POSIXct()

#analysis

#time----
time <- inner_join(gtfs_stops, gtfs_stop_times)
time$arrival_time   <- force_tzs(a.day + hms(time$arrival_time), tzones = time$stop_timezone, tzone_out = "America/New_York") %>%
  as.POSIXct()
time$departure_time <- force_tzs(a.day + hms(time$departure_time), tzones = time$stop_timezone, tzone_out = "America/New_York") %>%
  as.POSIXct()

sids <- NULL
for (i in 1:nrow(gtfs_calendar)) {
  sids <- c(sids, 
            gtfs_calendar[i,][dplyr::between(x = a.day, 
                                             left = gtfs_calendar$start_date[i], 
                                             right = gtfs_calendar$end_date[i]),] %>%
              .$service_id)
}

amtrak.full <- time %>% 
  inner_join(., gtfs_trips) %>%
  inner_join(., gtfs_calendar) %>%
  .[.$service_id %in% sids, ] %>% 
  melt(., 
       measure.vars = c("monday", "tuesday", "wednesday", 
                        "thursday", "friday", "saturday", 
                        "sunday"), 
       variable.name = "dow.name", value.name = "dow.value") %>%
  .[.$dow.name == tolower(wday(a.day, label = TRUE, abbr = FALSE)) & 
      .$dow.value == 1,] %>% 
  .[colnames(.) %in% mandatory.fields] %>%
  inner_join(., gtfs_routes) %>% 
  inner_join(., gtfs_agency[gtfs_agency$agency_name == "Amtrak",]) %>%
  .[colnames(.) %in% c("agency_id", mandatory.fields)] 

amtrak.transfers <- inner_join(gtfs_transfers, gtfs_stops, 
                               by = c("from_stop_id" = "stop_id")) %>%
  inner_join(., time, 
             by = c("from_stop_id" = "stop_id")) %>%
  .[!duplicated(.),]


amtrak.routes <- amtrak.full %>%
  group_by(trip_id, direction_id, route_long_name, 
           stop_sequence, stop_id, stop_lon, stop_lat, agency_id) %>%
  summarise() %>%
  .[order(.$stop_sequence),]

amtrak.times <- amtrak.full %>%
  group_by(trip_id, trip_headsign, direction_id, route_long_name, stop_name, 
           stop_id, arrival_time, departure_time, stop_sequence, 
           stop_lon, stop_lat) %>%
  summarise()


fun_map(zoom = 5, padding = 4, bbox = fun_bbox(amtrak.stops))+
  geom_point(data = data.frame(y = c(41.891617), x = c(-87.609085)), 
             aes(x = x, y = y), 
             color = "red", size = 4) +
  geom_point(data = amtrak.stops, shape = 21, size = 1, fill = "blue", 
             color = "white",
             aes(x = stop_lon, y = stop_lat)) 

fun_map(zoom = 4, padding = 4, bbox = fun_bbox(amtrak.routes)) +
  geom_path(data = amtrak.routes, 
            aes(x = stop_lon, y = stop_lat, group = trip_id, 
                color = factor(agency_id))) +
  theme(legend.position = "bottom")



amtrak.times$route_long_name %>% unique()
rln <- c("Empire Builder")

amtrak.times$stop_name_f <- factor(amtrak.times$stop_name, 
                                   levels = unique(amtrak.times$stop_name[order(amtrak.times$arrival_time)]))
ggplot() + 
  # geom_point(data = amtrak.times[amtrak.times$route_long_name %in% rln,], 
  #            aes(y = stop_sequence, x = trip_id)) + 
  theme_bw() + 
  theme(strip.text.y = element_text(angle = 0)) +
  geom_text(data = amtrak.times[amtrak.times$route_long_name %in% rln,], 
            angle = 0, 
            aes(y = stop_sequence, x = factor(trip_id), 
                label = stop_name, 
                color = wday(arrival_time, label = TRUE, abbr = TRUE))) +
  facet_grid(~route_long_name+direction_id+trip_id, scales = "free", space = "free") +
  labs(color = "Weekday")


